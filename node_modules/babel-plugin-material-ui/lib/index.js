'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (_ref) {
  var types = _ref.types;

  return {
    visitor: {
      ImportDeclaration: function ImportDeclaration(path) {
        if (!path.node.specifiers.length) {
          return;
        }

        var settings = createTransformerSettings(path.node.source.value);

        if (!settings) {
          return;
        }

        var specifiers = path.node.specifiers.filter(function (spec) {
          return types.isImportSpecifier(spec);
        });

        if (specifiers.length < path.node.specifiers.length) {
          return;
        }

        specifiers.forEach(function (spec) {
          var name = spec.imported.name;

          var modulePath = settings.modules[name];

          if (!modulePath) {
            throw new Error(settings.index + ' does not contain module "' + name + '"');
          }

          var specifiers = [types.importDefaultSpecifier(types.identifier(spec.local.name))];

          path.insertBefore(types.importDeclaration(specifiers, types.stringLiteral(settings.index + '/' + modulePath)));
        });

        path.remove();
      }
    }
  };
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var rootModuleName = 'material-ui';
var rootModules = _lodash2.default.keyBy((0, _utils.listRequiredModules)(rootModuleName), function (item) {
  return _path2.default.basename(item);
});

var iconsModuleName = 'material-ui/svg-icons';
var iconModules = _lodash2.default.keyBy((0, _utils.listRequiredModules)(iconsModuleName), _lodash2.default.flow(_lodash2.default.camelCase, _lodash2.default.upperFirst));

var createTransformerSettings = function createTransformerSettings(sourceValue) {
  switch (sourceValue) {
    case rootModuleName:
      return {
        index: rootModuleName,
        modules: rootModules
      };
    case iconsModuleName:
      return {
        index: iconsModuleName,
        modules: iconModules
      };
    default:
      return null;
  }
};